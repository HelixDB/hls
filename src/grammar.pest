// ---------------------------------------------------------------------
// Main rules
// ---------------------
source = { SOI ~ (node_def | edge_def | vector_def | query_def)* ~ EOI }


// ---------------------------------------------------------------------
// Schema definitions
// ---------------------------------------------------------------------
vector_def = { "V::" ~ identifier_upper ~ node_body? }
node_def   = { "N::" ~ identifier_upper ~ node_body? }
edge_def   = { "E::" ~ identifier_upper ~ edge_body }

node_body  = { "{" ~ field_defs ~ "}" }
edge_body  = { "{" ~ "From:" ~ identifier_upper ~ "," ~ ("To:" ~ identifier_upper ~ "," ~ properties ~ "}" | "To:" ~ identifier_upper ~ ","? ~ "}") }
field_defs = { (field_def ~ ",")* ~ (field_def ~ ","?)? }
field_def  = { index? ~ identifier ~ ":" ~ param_type ~ (default)? }
index= { "INDEX" }
default = { "DEFAULT" ~  (now | float | integer | boolean | string_literal | none) } 
// optional = { "OPTIONAL" }


properties = { "Properties" ~ ":" ~ "{" ~ field_defs? ~ "}" }


// ---------------------------------------------------------------------
// Query definitions
// ---------------------------------------------------------------------
query_def    = { "QUERY" ~ identifier ~ query_params ~ "=>" ~ query_body ~ return_stmt } // TODO: possible optional return stmt
query_params = { "(" ~ (param_def ~ ("," ~ param_def)*)? ~ ")" }
param_def    = { identifier ~ ":" ~ param_type }
query_body   = { (get_stmt | AddN | AddV | BatchAddV | AddE | drop | for_loop)* }


// ---------------------------------------------------------------------
// Assignments and traversals
// ---------------------------------------------------------------------
get_stmt            = { identifier ~ "<-" ~ evaluates_to_anything }
traversal           = { (start_node | start_edge | start_vector ) ~ step* ~ last_step? }
id_traversal        = { identifier ~ ((step+ ~ last_step?) | last_step) }
anonymous_traversal = { "_"  ~ ((step+ ~ last_step?) | last_step)? }
step                = { "::" ~ (graph_step | where_step | closure_step | object_step | exclude_field | count | ID | range_step | AddE) }
last_step           = { "::" ~ (bool_operations | update) }
// change this for loop to be able to take traversals etc in the future. 
for_loop            = { "FOR" ~ for_argument ~ "IN" ~ identifier ~ "{" ~ query_body ~ "}" }
for_argument        = { object_access | object_destructuring | identifier }
object_access       = { identifier ~ "." ~ identifier }
object_destructuring = { "{" ~ identifier ~ ("," ~ identifier)* ~ "}" }

// ---------------------------------------------------------------------
// Evaluation rules for different types
// ---------------------------------------------------------------------
evaluates_to_anything = {
    AddN
  | AddV
  | BatchAddV
  | search_vector
  | AddE
  | exists
  | none
  | traversal
  | id_traversal
  | string_literal
  | float
  | integer
  | boolean
  | and
  | or
  | identifier
}

// ---------------------------------------------------------------------
// Evaluates to bool
// ---------------------------------------------------------------------
evaluates_to_bool = {
    exists
  | boolean
  | and
  | or
  | identifier
  | traversal
  | id_traversal
}

// ---------------------------------------------------------------------
// Evaluates to number
// ---------------------------------------------------------------------
evaluates_to_number = {
    float
  | integer
  | identifier
  | traversal
  | id_traversal
}

// ---------------------------------------------------------------------
// Return statement
// ---------------------------------------------------------------------
return_stmt = { "RETURN" ~ evaluates_to_anything ~ ("," ~ evaluates_to_anything)* }

// ---------------------------------------------------------------------
// Creation steps
// ---------------------------------------------------------------------
create_field  = { "{" ~ new_field ~ ("," ~ new_field)* ~ "}" }
new_field     = { identifier ~ ":" ~ (anonymous_traversal | evaluates_to_anything | create_field) }
to_from       = { to ~ from? | from ~ to? }
to            = { "::" ~ "To" ~ "(" ~ id_arg ~ ")" }
from          = { "::" ~ "From" ~ "(" ~ id_arg ~ ")" }
vec_literal   = { "[" ~ (float) ~ ("," ~ (float))* ~ "]" }
vector_data = { (identifier | vec_literal) }
AddN          = { "AddN" ~ ("<" ~ identifier_upper ~ ">") ~ ("(" ~ create_field? ~ ")")? }
AddE          = { "AddE" ~ ("<" ~ identifier_upper ~ ">") ~ ("(" ~ create_field? ~ ")")? ~ to_from }
AddV          = { "AddV" ~ ("<" ~ identifier_upper ~ ">") ~ ("(" ~ vector_data ~ ("," ~ create_field)* ~ ")") }

// ---------------------------------------------------------------------
// Source steps
// ---------------------------------------------------------------------
start_node = { "N" ~ ("<" ~ type_args ~ ">")? ~ ("(" ~ (id_args | by_index) ~ ")")? }
start_edge = { "E" ~ ("<" ~ type_args ~ ">")? ~ ("(" ~ (id_args | by_index) ~ ")")? }
start_vector = { "V" ~ ("<" ~ type_args ~ ">")? ~ ("(" ~ (id_args | by_index) ~ ")")? }
by_index = { "{" ~ id_arg ~ ":" ~ evaluates_to_anything ~ "}" }
// ---------------------------------------------------------------------
// Traversal steps
// ---------------------------------------------------------------------
graph_step = {
  out_e
  | in_e
  | from_n
  | to_n
  | out
  | in_nodes
  | shortest_path
}
out_e ={  "OutE" ~ ("<" ~ type_args ~ ">")?}
in_e ={ "InE" ~ ("<" ~ type_args ~ ">")?}
from_n ={ "FromN"}
to_n ={ "ToN"}
out ={ "Out" ~ ("<" ~ type_args ~ ">")?}
in_nodes ={ "In" ~ ("<" ~ type_args ~ ">")?}
shortest_path ={ "ShortestPath" ~ ("<" ~ type_args ~ ">")? ~ to_from}


// ---------------------------------------------------------------------
// Util steps
// ---------------------------------------------------------------------
where_step = { "WHERE" ~ "(" ~ (evaluates_to_bool | anonymous_traversal) ~ ")" }
exists     = { "EXISTS" ~ "(" ~ (traversal | id_traversal | anonymous_traversal) ~ ")" }
range_step = { "RANGE" ~ "(" ~ (evaluates_to_number) ~ "," ~ (evaluates_to_number) ~ ")" }
count        = { "COUNT" }
none         = { "NONE" }
ID           = { "ID" }
update_field = { identifier ~ ":" ~ (evaluates_to_anything | anonymous_traversal) }
update       = { "UPDATE" ~ "(" ~ "{" ~ update_field ~ ("," ~ update_field)* ~ "}" ~ ")" }
drop = { "DROP" ~ (traversal | id_traversal | identifier)? }

// ---------------------------------------------------------------------
// Vector steps
// ---------------------------------------------------------------------
search_vector = { "SearchV" ~ "<" ~ identifier_upper ~ ">" ~ "(" ~ vector_data ~ "," ~ (integer | identifier) ~ ")" }// ~ ("::" ~ pre_filter)? }
pre_filter = { "PREFILTER" ~ "(" ~ (evaluates_to_bool | anonymous_traversal) ~ ")" }
BatchAddV = { "BatchAddV" ~ "<" ~ identifier_upper ~ ">" ~ "(" ~ identifier ~ ")" }

// ---------------------------------------------------------------------
// Boolean operations
// ---------------------------------------------------------------------
and             = { "AND" ~ "(" ~ (evaluates_to_bool | anonymous_traversal) ~ ("," ~ (evaluates_to_bool | anonymous_traversal))* ~ ")" }
or              = { "OR" ~ "(" ~ (evaluates_to_bool | anonymous_traversal) ~ ("," ~ (evaluates_to_bool | anonymous_traversal))* ~ ")" }
bool_operations = { GT | GTE | LT | LTE | EQ | NEQ }
GT              = { "GT" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
GTE             = { "GTE" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
LT              = { "LT" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
LTE             = { "LTE" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
EQ              = { "EQ" ~ "(" ~ (evaluates_to_anything | anonymous_traversal) ~ ")" }
NEQ             = { "NEQ" ~ "(" ~ (evaluates_to_anything | anonymous_traversal) ~ ")" }


// ---------------------------------------------------------------------
// Object access and remapping steps
// ---------------------------------------------------------------------
object_step   = { "{" ~ ((mapping_field ~ ("," ~ mapping_field)* ~ ","?) |
(mapping_field ~ ("," ~ mapping_field)* ~ ","?)? ~ spread_object)  ~ "}" }
exclude_field = { "!" ~ "{" ~ identifier ~ ("," ~ identifier)* ~ ("," ~ spread_object)? ~ "}" }
closure_step  = { "|" ~ identifier ~ "|" ~ object_step }
spread_object = { ".." ~ ","?}
mapping_field = { (identifier ~ (":" ~ (anonymous_traversal | evaluates_to_anything | object_step))) | identifier }


// ---------------------------------------------------------------------
// Types
// ---------------------------------------------------------------------
type_args = { identifier_upper ~ ("," ~ identifier_upper)* }
id_arg    = { (identifier | string_literal) }
id_args   = { (id_arg) ~ ("," ~ id_arg)* }
array            = { "[" ~ param_type ~ "]" }
object           = { "{" ~ field_defs ~ "}" }
named_type       = { "String" | "Boolean" | "F32" | "F64" | "I8" | "I16" | "I32" | "I64" | "U8" | "U16" | "U32" | "U64" | "U128" }
ID_TYPE          = { "ID" }
date_type       = { "Date" }
param_type       = { named_type | date_type | ID_TYPE | array | object | identifier  }

// ---------------------------------------------------------------------
// Literals
// ---------------------------------------------------------------------
string_literal   = ${ "\"" ~ inner_string ~ "\"" }
inner_string     = @{ (!("\"" | "\\") ~ ANY)* }
boolean          =  { "true" | "false" }
identifier       = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
identifier_upper = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
integer          = @{ ASCII_DIGIT+ }
float            = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
now              = { "NOW" }

// ---------------------------------------------------------------------
// Whitespace and comments
// ---------------------------------------------------------------------
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }

